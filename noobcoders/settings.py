"""
Django settings for noobcoders project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-emp15tygr2^v*5m1d&&#d^ez6h5eic=1m*&8n@yizpe^q=xxm*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#debug will be false once we ready to deploy for security issues
ALLOWED_HOSTS = ["noobcoders-production.up.railway.app"]


# Application definition
CSRF_TRUSTED_ORIGINS = ["https://noobcoders-production.up.railway.app/"]


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'projects.apps.ProjectsConfig', #connecting project app
    'users.apps.UsersConfig', #connecting users app

    'rest_framework', #django rest framework installation setup after runnng py -m pip install djangorestframework
    'corsheaders',

    'storages',  #connecting s3 bucket to django #(mid-process)

]

#setup for json web tokens for authenication for our rest api
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

#customization of json web tokens
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'noobcoders.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'noobcoders.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

#this is how we connect to postgreSQL database and view all the datas from pgadmin panel
#in pgadmin we have to create database , its port , user, password, host, port
#that should be listed here
#install psycopg2(database adapter) : connect django and postgreQL (pip install psycopg2)
#then createsuperuser again (as usual / admin )
#then run py manage.py migrate 

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'devsearch', 
        'USER': 'rohan_12dx' ,
        'PASSWORD': 'integration',
        'HOST':'database-1.cheshksi3uvv.ap-south-1.rds.amazonaws.com',
        'PORT':'5432',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

#allowed domain to access our rest api
CORS_ALLOW_ALL_ORIGINS = True

#Sending Emails ( Welcome Emails spectifically )

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' #backend setup for sending email
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587 
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'from.rohan.email@gmail.com' #sender /user email
EMAIL_HOST_PASSWORD = 'nzjznfqoawizszzh'  #app password so we dont have to use original password to login
  



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = ''

#for static file
STATICFILES_DIRS =[
    BASE_DIR / "static"
]

#media root tells django where to upload the user uploaded content

MEDIA_ROOT = os.path.join(BASE_DIR,'static/images')
STATIC_ROOT = os.path.join(BASE_DIR,'staticfiles') 
#after doing this and run the command py manage.py collectstatic . then django collects
#all the static files in the whole project and bunch them into one file namely(staticfiles)

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


AWS_QUERYSTRING_AUTH = False
AWS_S3_FILE_OVERWRITE = False

AWS_ACCESS_KEY_ID = 'AKIA3NSROTYNZJ5J2NHG'

AWS_SECRET_ACCESS_KEY = '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'

AWS_STORAGE_BUCKET_NAME = 'devsearch--bucket--box'

